version: '3.8'

services:
  webssh-server:
    build:
      context: ./server
      dockerfile: ../docker/Dockerfile.server
    container_name: webssh-server
    ports:
      - "3000:3000"
    volumes:
      - webssh_data:/app/data
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_PATH=/app/data/webssh.db
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_change_in_production}
      - JWT_EXPIRES_IN=24h
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-your_32_byte_hex_encryption_key_change_in_production}
      - CORS_ORIGIN=http://localhost:8080
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      
      # OIDC/SSO Configuration (Optional)
      - OIDC_ISSUER=${OIDC_ISSUER:-}
      - OIDC_CLIENT_ID=${OIDC_CLIENT_ID:-}
      - OIDC_CLIENT_SECRET=${OIDC_CLIENT_SECRET:-}
      - OIDC_ADMIN_GROUP_SCOPE=${OIDC_ADMIN_GROUP_SCOPE:-}
      
      # Registration Control
      - DISABLED_SIGNUP=${DISABLED_SIGNUP:-false}
      
      # LLM Configuration (Optional)
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-3.5-turbo}
      - OLLAMA_URL=${OLLAMA_URL:-http://localhost:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama2}
    restart: unless-stopped
    networks:
      - webssh-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  webssh-client:
    build:
      context: ./client
      dockerfile: ../docker/Dockerfile.client
    container_name: webssh-client
    ports:
      - "8080:80"
    depends_on:
      webssh-server:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - webssh-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  webssh_data:
    driver: local

networks:
  webssh-network:
    driver: bridge
